class c{constructor(i){let{x:r,y:e,width:t,height:n}=i;this.x=r,this.y=e,this.width=t,this.height=n}get top(){return this.y}get bottom(){return this.y+this.height}get left(){return this.x}get right(){return this.x+this.width}}function m(s){const i=s.getBoundingClientRect(),r=getComputedStyle(s),e=r.transform;if(e){let t,n,h,o,a;if(e.startsWith("matrix3d("))t=e.slice(9,-1).split(/, /),n=+t[0],h=+t[5],o=+t[12],a=+t[13];else if(e.startsWith("matrix("))t=e.slice(7,-1).split(/, /),n=+t[0],h=+t[3],o=+t[4],a=+t[5];else return new c(i);const f=r.transformOrigin,d=i.x-o-(1-n)*parseFloat(f),u=i.y-a-(1-h)*parseFloat(f.slice(f.indexOf(" ")+1)),l=n?i.width/n:s.offsetWidth+1,g=h?i.height/h:s.offsetHeight+1;return new c({x:d,y:u,width:l,height:g})}else return new c(i)}function x(s,i,r){if(typeof s.animate>"u")return{finished:Promise.resolve()};let e;try{e=s.animate(i,r)}catch{return{finished:Promise.resolve()}}return typeof e.finished>"u"&&(e.finished=new Promise(t=>{e.onfinish=()=>{t(e)}})),e}const y="cubic-bezier(0.4, 0, 0.2, 1)";export{x as a,m as n,y as s};
